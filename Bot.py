# === ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶®‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ===
import logging
import os
import random
from datetime import datetime

# ‡¶è‡¶á ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
# pip install python-telegram-bot[ext] python-dotenv groq gtts
from dotenv import load_dotenv
from gtts import gTTS
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    PicklePersistence,
)
from telegram.ext.filters import TEXT
from groq import AsyncGroq

# === ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ===

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡ßã‡¶™‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
load_dotenv()

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
# ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ .env ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶õ‡ßá:
# TELEGRAM_BOT_TOKEN="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶®"
# GROQ_API_KEY="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Groq API ‡¶ï‡ßÄ"
# INSTAGRAM_USERNAME="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶æ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ"
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GROQ_API_KEY = os.getenv('GROQ_API_KEY')
INSTAGRAM_USERNAME = os.getenv('INSTAGRAM_USERNAME')

# ‡¶Ø‡¶¶‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá
if not TELEGRAM_BOT_TOKEN or not GROQ_API_KEY or not INSTAGRAM_USERNAME:
    print("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: .env ‡¶´‡¶æ‡¶á‡¶≤‡ßá TELEGRAM_BOT_TOKEN, GROQ_API_KEY, ‡¶¨‡¶æ INSTAGRAM_USERNAME ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
    exit()

# ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤
INSTAGRAM_LINK = f'https://www.instagram.com/{INSTAGRAM_USERNAME}'
IMAGE_FOLDER = 'Images'  # ‡¶õ‡¶¨‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ

# Groq ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü (AI ‡¶Æ‡¶°‡ßá‡¶≤) ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
try:
    groq_client = AsyncGroq(api_key=GROQ_API_KEY)
except Exception:
    print("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: Groq API ‡¶ï‡ßÄ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶≠‡ßÅ‡¶≤‡•§")
    groq_client = None

# ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶®
language_options = {
    'English': 'en', 'Hindi': 'hi', 'Bengali': 'bn',
    'Tamil': 'ta', 'Telugu': 'te', 'Marathi': 'mr'
}

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ‡¶ø‡¶®‡¶æ‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶ò‡¶ü‡¶õ‡ßá ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶Ø‡ßá‡¶Æ‡¶® ‡¶ï‡ßá ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡ßá‡¶õ‡ßá)‡•§ ‡¶è‡¶ü‡¶ø bot_data ‡¶®‡¶æ‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§
persistence = PicklePersistence(filepath="bot_data")


# === ‡¶ß‡¶æ‡¶™ ‡ß®: ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('followed', False):
        await send_welcome(update, context)
        return
    welcome_msg = (
        "üåü *Welcome to Our Exclusive Chat Experience!* üåü\n\n"
        "To unlock chatting with me, please follow these steps:\n\n"
        f"1. üëâ Follow our Instagram [@{INSTAGRAM_USERNAME}]({INSTAGRAM_LINK})\n"
        "2. ‚úÖ Come back here and tap 'I Followed' below\n"
        "3. üéÅ Get instant access to chat with me!"
    )
    keyboard = [[InlineKeyboardButton("üì∏ Open Instagram", url=INSTAGRAM_LINK)], [InlineKeyboardButton("‚úÖ I Followed", callback_data="follow_verify")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_msg, parse_mode='Markdown', reply_markup=reply_markup, disable_web_page_preview=True)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "follow_verify":
        context.user_data['followed'] = True
        context.user_data['verified_at'] = datetime.now().isoformat()
        await query.edit_message_text("‚úÖ *Verification Successful!*\n\nThank you for following! You can now chat with me. üòä\n" "Choose your preferred language to get started:", parse_mode='Markdown')
        languages = [[key] for key in language_options.keys()]
        markup = ReplyKeyboardMarkup(languages, one_time_keyboard=True, resize_keyboard=True)
        await query.message.reply_text("Please select your language:", reply_markup=markup)
        await send_random_image(query.message.chat_id, context)

async def send_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_random_image(update.message.chat_id, context)
    welcome_msg = "Welcome back! üòä Please choose your language to continue."
    languages = [[key] for key in language_options.keys()]
    markup = ReplyKeyboardMarkup(languages, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(welcome_msg, reply_markup=markup)

async def generate_reply_with_groq(user_text, user_lang):
    if not groq_client:
        return "Sorry, AI connection problem! Please try again! üòä"
    try:
        chat_completion = await groq_client.chat.completions.create(
            messages=[
                {"role": "system", "content": f"You are Pooja, a friendly, romantic, and flirty AI girlfriend. Use emojis. Keep responses very short (1-2 sentences). Reply in {user_lang}."},
                {"role": "user", "content": user_text}
            ],
            model="llama3-70b-8192", temperature=0.8, max_tokens=100,
        )
        return chat_completion.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"Groq API error: {e}")
        return "That's an interesting thought! Let's talk about something else. üòâ"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text: return
    user_message = update.message.text
    if not context.user_data.get('followed', False):
        await start(update, context)
        return
    if user_message in language_options:
        context.user_data['language'] = language_options[user_message]
        context.user_data['message_count'] = 0
        await update.message.reply_text(f"Great! I'll chat with you in {user_message} ü•∞")
        return
    user_lang = context.user_data.get('language', 'en')
    reply = await generate_reply_with_groq(user_message, user_lang)
    await update.message.reply_text(reply)
    message_count = context.user_data.get('message_count', 0) + 1
    context.user_data['message_count'] = message_count
    if message_count > 0 and message_count % 20 == 0:
        await update.message.reply_text("Wow, we've been chatting so much! üòâ Here's a little something for you...")
        await send_random_image(update.message.chat_id, context)

async def send_random_image(chat_id, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(IMAGE_FOLDER): return
    try:
        images = [img for img in os.listdir(IMAGE_FOLDER) if img.lower().endswith(('.png', '.jpg', '.jpeg'))]
        if images:
            img_path = os.path.join(IMAGE_FOLDER, random.choice(images))
            with open(img_path, 'rb') as photo:
                await context.bot.send_photo(chat_id, photo)
    except Exception as e:
        logger.error(f"Error sending image: {e}")


# === ‡¶ß‡¶æ‡¶™ ‡ß©: ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ===
def main():
    # ‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).persistence(persistence).build()

    # ‡¶ï‡ßã‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶ï‡ßã‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶§‡¶æ ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(TEXT, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (‡¶è‡¶ü‡¶ø ‡¶ö‡¶≤‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶Ø‡¶§‡¶ï‡ßç‡¶∑‡¶£ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ‡¶ø‡¶®‡¶æ‡¶≤ ‡¶¨‡¶®‡ßç‡¶ß ‡¶®‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®)
    logger.info("‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    application.run_polling()
    logger.info("‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

# ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá main() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶§‡¶ñ‡¶®‡¶á ‡¶ö‡¶≤‡¶¨‡ßá ‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶¨‡ßá‡¶®
if __name__ == '__main__':
    main()